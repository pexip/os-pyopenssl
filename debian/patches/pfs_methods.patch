--- a/src/OpenSSL/SSL.py
+++ b/src/OpenSSL/SSL.py
@@ -1356,6 +1356,67 @@
             _lib.SSL_CTX_set_tlsext_use_srtp(self._context, profiles) == 0
         )
 
+    def set_tmp_dh_from_pem(self, pem):
+        """
+        Set DH parameters from PEM-encoded data
+
+        :param pem: String containing PEM-encoded DH parameters.
+        :return: None
+        """
+        if not isinstance(pem, bytes):
+            raise TypeError("pem must be a byte string")
+
+        bio = _lib.BIO_new(_lib.BIO_s_mem())
+        if bio == _ffi.NULL:
+            _raise_current_error()
+        bio = _ffi.gc(bio, _lib.BIO_free)
+
+        result = _lib.BIO_write(bio, pem, len(pem))
+        if result <= 0:
+            _raise_current_error()
+
+        dh = _lib.PEM_read_bio_DHparams(bio, _ffi.NULL, _ffi.NULL, _ffi.NULL)
+        if dh == _ffi.NULL:
+            _raise_current_error()
+        dh = _ffi.gc(dh, _lib.DH_free)
+
+        _lib.SSL_CTX_set_tmp_dh(self._context, dh)
+
+    def set_tmp_ecdh_from_pem(self, pem):
+        """
+        Set ECDH parameters from PEM-encoded data
+
+        :param pem: String containing PEM-encoded ECDH parameters.
+        :return: None
+        """
+        if not isinstance(pem, bytes):
+            raise TypeError("pem must be a byte string")
+
+        bio = _lib.BIO_new(_lib.BIO_s_mem())
+        if bio == _ffi.NULL:
+            _raise_current_error()
+        bio = _ffi.gc(bio, _lib.BIO_free)
+
+        result = _lib.BIO_write(bio, pem, len(pem))
+        if result <= 0:
+            _raise_current_error()
+
+        group = _lib.PEM_read_bio_ECPKParameters(bio, _ffi.NULL, _ffi.NULL, _ffi.NULL)
+        if group == _ffi.NULL:
+            _raise_current_error()
+        group = _ffi.gc(group, _lib.EC_GROUP_free)
+
+        nid = _lib.EC_GROUP_get_curve_name(group)
+        if nid == 0:
+            _raise_current_error()
+
+        key = _lib.EC_KEY_new_by_curve_name(nid)
+        if key == _ffi.NULL:
+            _raise_current_error()
+        key = _ffi.gc(key, _lib.EC_KEY_free)
+
+        _lib.SSL_CTX_set_tmp_ecdh(self._context, key)
+
     @_requires_alpn
     def set_alpn_protos(self, protos):
         """
